#ifndef SO@GUI@_BASIC_H
#define SO@GUI@_BASIC_H

// NB: this is not a pure configure-input file, it's also a config header...

/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) by Kongsberg Oil & Gas Technologies.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using Coin with software that can not be combined with the GNU
 *  GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Kongsberg Oil & Gas Technologies
 *  about acquiring a Coin Professional Edition License.
 *
 *  See http://www.coin3d.org/ for more information.
 *
 *  Kongsberg Oil & Gas Technologies, Bygdoy Alle 5, 0257 Oslo, NORWAY.
 *  http://www.sim.no/  sales@sim.no  coin-support@coin3d.org
 *
\**************************************************************************/

// *************************************************************************

/* Some useful inline template functions:
 *   So@Gui@Min(Val1, Val2)       - returns minimum value
 *   So@Gui@Max(Val1, Val2)       - returns maximum value
 *   So@Gui@Clamp(Val, Min, Max)  - returns clamped value
 *   So@Gui@Swap(Val1, Val2)      - swaps the two values (no return value)
 */

template <class Type>
inline Type So@Gui@Abs(Type Val) {
  return (Val < 0) ? -Val : Val;
}

template <class Type>
inline Type So@Gui@Min(Type a, Type b) {
  return (b < a) ? b : a;
}

template <class Type>
inline Type So@Gui@Max(Type a, Type b) {
  return (b > a) ? b : a;
}

template <class Type>
inline Type So@Gui@Clamp(Type val, Type min, Type max) {
  return So@Gui@Max(min, So@Gui@Min(max, val));
}

template <class Type>
inline void So@Gui@Swap(Type & a, Type & b) {
  Type t = a; a = b; b = t;
}

// *************************************************************************

#define __COIN_SO@GUI@__

#if ! defined(SO@GUI@_MAJOR_VERSION)
#undef SO@GUI@_MAJOR_VERSION
#endif /* ! SO@GUI@_MAJOR_VERSION */
#if ! defined(SO@GUI@_MINOR_VERSION)
#undef SO@GUI@_MINOR_VERSION
#endif /* ! SO@GUI@_MINOR_VERSION */
#if ! defined(SO@GUI@_MICRO_VERSION)
#undef SO@GUI@_MICRO_VERSION
#endif /* ! SO@GUI@_MICRO_VERSION */
#if ! defined(SO@GUI@_BETA_VERSION)
#undef SO@GUI@_BETA_VERSION
#endif /* ! SO@GUI@_BETA_VERSION */
#if ! defined(SO@GUI@_VERSION)
#undef SO@GUI@_VERSION
#endif /* ! SO@GUI@_VERSION */

// *************************************************************************

/* Precaution to avoid an error easily made by the application programmer. */
#ifdef SO@GUI@_DLL_API
# error Leave the internal SO@GUI@_DLL_API define alone.
#endif /* SO@GUI@_DLL_API */

/*
  On MSWindows platforms, one of these defines must always be set when
  building application programs:

   - "SO@GUI@_DLL", when the application programmer is using the
     library in the form of a dynamic link library (DLL)

   - "SO@GUI@_NOT_DLL", when the application programmer is using the
     library in the form of a static object library (LIB)

  Note that either SO@GUI@_DLL or SO@GUI@_NOT_DLL _must_ be defined by
  the application programmer on MSWindows platforms, or else the
  #error statement will hit. Set up one or the other of these two
  defines in your compiler environment according to how the library
  was built -- as a DLL (use "SO@GUI@_DLL") or as a LIB (use
  "SO@GUI@_NOT_DLL").

  (Setting up defines for the compiler is typically done by either
  adding something like "/DSO@GUI@_DLL" to the compiler's argument
  line (for command-line build processes), or by adding the define to
  the list of preprocessor symbols in your IDE GUI (in the MSVC IDE,
  this is done from the "Project"->"Settings" menu, choose the "C/C++"
  tab, then "Preprocessor" from the dropdown box and add the
  appropriate define)).

  It is extremely important that the application programmer uses the
  correct define, as using "SO@GUI@_NOT_DLL" when "SO@GUI@_DLL" is
  correct is likely to cause mysterious crashes.
 */
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
# ifdef SO@GUI@_INTERNAL
#  ifdef SO@GUI@_MAKE_DLL
#   define SO@GUI@_DLL_API __declspec(dllexport)
#  endif /* SO@GUI@_MAKE_DLL */
# else /* !SO@GUI@_INTERNAL */
#  ifdef SO@GUI@_DLL
#   define SO@GUI@_DLL_API __declspec(dllimport)
#  else /* !SO@GUI@_DLL */
#   ifndef SO@GUI@_NOT_DLL
#    error Define either SO@GUI@_DLL or SO@GUI@_NOT_DLL as appropriate for your linkage! See Inventor/@Gui@/So@Gui@Basic.h for further instructions.
#   endif /* SO@GUI@_NOT_DLL */
#  endif /* !SO@GUI@_DLL */
# endif /* !SO@GUI@_MAKE_DLL */
#endif /* Microsoft Windows */

/* Empty define to avoid errors when _not_ compiling an MSWindows DLL. */
#ifndef SO@GUI@_DLL_API
# define SO@GUI@_DLL_API
#endif /* !SO@GUI@_DLL_API */

#ifndef GUI_TOOLKIT_VERSION
#define GUI_TOOLKIT_VERSION ""
#endif /* GUI_TOOLKIT_VERSION */

#endif // ! SO@GUI@_BASIC_H
