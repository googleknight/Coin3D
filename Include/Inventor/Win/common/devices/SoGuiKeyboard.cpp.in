// @configure_input@

/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) by Kongsberg Oil & Gas Technologies.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using Coin with software that can not be combined with the GNU
 *  GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Kongsberg Oil & Gas Technologies
 *  about acquiring a Coin Professional Edition License.
 *
 *  See http://www.coin3d.org/ for more information.
 *
 *  Kongsberg Oil & Gas Technologies, Bygdoy Alle 5, 0257 Oslo, NORWAY.
 *  http://www.sim.no/  sales@sim.no  coin-support@coin3d.org
 *
\**************************************************************************/

/*!
  \class So@Gui@Keyboard So@Gui@Keyboard.h Inventor/@Gui@/devices/So@Gui@Keyboard.h
  \brief The So@Gui@Keyboard class is the keyboard input device abstraction.
  \ingroup devices

  The So@Gui@Keyboard class is the glue between native keyboard
  handling and keyboard interaction with the Inventor scenegraph.

  All components derived from the So@Gui@RenderArea have got an
  So@Gui@Keyboard device attached by default.
*/

// *************************************************************************

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#include <Inventor/@Gui@/devices/So@Gui@Keyboard.h>
#include <Inventor/@Gui@/devices/SoGuiKeyboardP.h>
#include <Inventor/events/SoKeyboardEvent.h>

// *************************************************************************

SO@GUI@_OBJECT_SOURCE(So@Gui@Keyboard);

// *************************************************************************

/*!
  \enum So@Gui@Keyboard::Events
  Enumeration over supported event types.
*/

/*!
  \var So@Gui@Keyboard::Events So@Gui@Keyboard::KEY_PRESS
  Maskbit for a keyboard button press event.
*/

/*!
  \var So@Gui@Keyboard::Events So@Gui@Keyboard::KEY_RELEASE
  Maskbit for a keyboard button release event.
*/

/*!
  \var So@Gui@Keyboard::Events So@Gui@Keyboard::ALL_EVENTS
  Combined bitmask for all possible events.
*/

/*!
  \fn So@Gui@Keyboard::So@Gui@Keyboard(int mask)

  Constructor. The \a mask specifies which keyboard-related events to
  handle. Others will just be ignored.
*/

/*!
  \fn So@Gui@Keyboard::~So@Gui@Keyboard()

  Destructor.
*/

// *************************************************************************

#ifndef DOXYGEN_SKIP_THIS

SoGuiKeyboardP::SoGuiKeyboardP(void)
{
  this->kbdevent = new SoKeyboardEvent;
}

SoGuiKeyboardP::~SoGuiKeyboardP()
{
  delete this->kbdevent;
}

#endif // !DOXYGEN_SKIP_THIS

// *************************************************************************
